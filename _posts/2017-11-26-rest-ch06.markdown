---
layout: post
title:  "REST - Chapter 6. Experience and Evaluation"
date:   2017-11-26 21:13:00 +0500
categories: papers
---

By Roy Thomas Fielding. 2000

## Chapter 6. Experience and Evaluation

HTTP|Hypertext Transfer Protocol
URI|Uniform Resource Identifiers
IETF|Internet Engineering Taskforce
W3C|World Wide Web Consortium 
URL|Uniform Resource Locators

### Representational State Transfer
The name “Representational State Transfer” is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.

### 6.2 REST Applied to URI

### 6.2.1 Redefinition of Resource

### Resource
The definition of resource in REST is based on a simple premise: identifiers should change as infrequently as possible.

REST accomplishes this by defining a resource to be the semantics of what the author intends to identify, rather than the value corresponding to those semantics at the time the reference is created.

It is then left to the author to ensure that the identifier chosen for a reference does indeed identify the intended semantics.

### 6.2.2 Manipulating Shadows
How does a user access, manipulate, or transfer a concept such that they can get something useful when a hypertext link is selected? REST answers that question by defining the things that are manipulated to be representations of the identified resource, rather than the resource itself.

### Resource Identifiers
An origin server maintains a mapping from resource identifiers to the set of representations corresponding to each resource. A resource is therefore manipulated by transferring representations through the generic interface defined by the resource identifier.

### Intent of an Application Action
The protocols are specific about the intent of an application action, but the mechanism behind the interface must decide how that intention affects the underlying implementation of the resource mapping to representations

### 6.2.3 Remote Authoring

### Resource
The resource is not the storage object. The resource is not a mechanism that the server uses to handle the storage object. The resource is a conceptual mapping — the server receives the identifier (which identifies the mapping) and applies it to its current mapping implementation (usually a combination of collection-specific deep tree traversal and/or hash tables) to find the currently responsible handler implementation and the handler implementation then selects the appropriate action+response based on the request content.

### 6.2.4 Binding Semantics to URI
A resource can have many identifiers. In other words, there may exist two or more different URI that have equivalent semantics when used to access a server. It is also possible to have two URI that result in the  same mechanism being used upon access to the server, and yet those URI identify two different resources because they don’t mean the same thing.

### Semantics
Semantics are a by-product of the act of assigning resource identifiers and populating those resources with representations.

At no time whatsoever do the server or client software need to know or understand the meaning of a URI — they merely act as a conduit through which the creator of a resource (a human naming authority) can associate representations with the semantics identified by the URI. 

There are no resources on the server; just mechanisms that supply answers across an abstract interface defined by resources

### Communication Model
The Web architecture consists of constraints on the communication model between components, based on the role of each component during an application action

### 6.2.5 REST Mismatches in URI

### Identifiers
One form of abuse is to include information that identifies the current user within all of the URI referenced by a hypermedia response representation. 

Such embedded user-ids can be used to maintain session state on the server, track user behavior by logging their actions, or carry user preferences across multiple actions. 

However, by violating REST’s constraints, these systems also cause shared caching to become ineffective, reduce server scalability, and result in undesirable effects when a user shares those references with others.

### File Systems
Another conflict with the resource interface of REST occurs when software attempts to treat the Web as a distributed file system. 

Since file systems expose the implementation of their information, tools exist to “mirror” that information across to multiple sites as a means of load balancing and redistributing the content closer to users. 

However, they can do so only because files have a fixed set of semantics (a named sequence of bytes) that can be duplicated easily.

### 6.3 REST Applied to HTTP
HTTP is the primary application-level protocol for communication between Web components and the only protocol designed specifically for the transfer of resource representations.

### 6.3.1 Extensibility

#### Source
[Architectural Styles and the Design of Network-based Software Architectures][rest]

[rest]: http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm