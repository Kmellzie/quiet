---
layout: post
title:  "REST - Chapter 1. Software Architecture"
date:   2017-11-21 21:13:00 +0500
categories: papers
---

By Roy Thomas Fielding. 2000

## 1.1 Run-time Abstraction

### Software Architecture
A software architecture is an abstraction of the run-time elements of a software system during some phase of its operation. A system may be composed of many levels of abstraction and many phases of operation, each with its own software architecture.

### Architecture
An architecture represents an abstraction of system behavior at that level, such that architectural elements are delineated by the abstract interfaces they provide to other elements 

### Operational Phases
A software system will often have multiple operational phases, such as start-up, initialization, normal processing, re-initialization, and shutdown. Each operational phase has its own architecture

### Processing Elements
Perry and Wolf define processing elements as “transformers of data,” while Shaw et al. describe components as “the locus of computation and state.” 

### Component
A component is a unit of software that performs some function at run-time. Examples include programs, objects, processes, and filters.

### Software Architecture and Software Structure:
The former is an abstraction of the run-time behavior of a software system, whereas the latter is a property of the static software source code.  Therefore, architectural design and source code structural design, though closely related, are separate design activities

## 1.2 Elements

### Software Architecture
A software architecture is defined by a configuration of architectural elements-components, connectors, and data-constrained in their relationships in order to achieve a desired set of architectural properties.

### Architectural Elements
Architectural elements include processing, data, and connecting elements. Form is defined by the properties of the elements and the relationships among the elements - that is, the constraints on the elements. The rationale provides the underlying basis for the architecture by capturing the motivation for the choice of architectural style, the choice of elements, and the form.

### Rationale
Razón fundamental

### Reflective Systems
Reflective systems can use the characteristics of past performance to change future behavior

### Architecture Properties
An architecture has, by design, a set of properties that allow it to meet or exceed the system requirements. Ignorance of those properties may lead to later changes which violate the architecture, just as the replacement of a load-bearing wall with a large window frame may violate the structural stability of a building.

### Element Types
Processing elements are those that perform transformations on data, data elements are those that contain the information that is used and transformed, and connecting elements are the glue that holds the different pieces of the architecture together.

### System Architecture
An architecture of a system is a collection of computational components together with a description of the interactions between these components-the connectors.

### Topología
El término topología se utiliza para identificar a un área de la matemática que estudia la continuidad y otros conceptos originados a partir de ella. Se trata de una especialización vinculada a las propiedades y características que poseen los cuerpos geométricos y que se mantienen sin alteraciones gracias a cambios continuos, con independencia de su tamaño o apariencia.

En el ámbito de la informática, la topología de red representa un conjunto de ordenadores comunicados entre sí para el intercambio de información, donde cada uno se denomina nodo. 

## 1.2.1 Components

### Component
A component is an abstract unit of software instructions and internal state that provides a transformation of data via its interface.

### Processing Elements
Processing elements are defined as those components that supply the transformation on the data element. They are the elements that perform computation.  Example transformations include loading into memory from secondary storage, performing some calculation, translating to a different format, encapsulation with other data, etc

### Insofar
En la medida

### Component Behavior
The behavior of each component is part of the architecture insofar as that behavior can be observed or discerned from the point of view of another component 

### Component Interface
A component is defined by its interface and the services it provides to other components, rather than by its implementation behind the interface. Parnas would define this as the set of assumptions that other architectural elements can make about the component.

## 1.2.2 Connectors

### Connector
A connector is an abstract mechanism that mediates communication, coordination, or cooperation among components.  They are the glue that holds the various pieces of the architecture together.  Examples include shared representations, remote procedure calls, message-passing protocols, and data streams.

### Connector
Connectors enable communication between components by transferring data elements from one interface to another without changing the data.  Internally, a connector may consist of a subsystem of components that transform the data for transfer, perform the transfer, and then reverse the transformation for delivery.  However, the external behavioral abstraction captured by the architecture ignores those details. In contrast, a component may, but not always will, transform data from the external perspective.

## 1.2.3 Data

### Datum
A datum is an element of information that is transferred from a component, or received by a component, via a connector.  Examples include byte-sequences, messages, marshalled parameters, and serialized objects, but do not include information that is permanently resident or hidden within a component

### Data
Components can also generate data, as in the case of a software encapsulation of a clock or sensor.  The nature of the data elements within a network-based application architecture will often determine whether or not a given architectural style is appropriate.

## 1.3 Configurations

### Configuration
A configuration is the structure of architectural relationships among components, connectors, and data during a period of system run-time.  Strictly speaking, one might think of a configuration as being equivalent to a set of specific constraints on component interaction.

### System Description

|Components|Which are the locus of computation
|Connectors|Which define the interactions between components
|Configurations|Which are collections of interacting components and connectors

### General Constraints
Separating the active topology from more general constraints allows an architect to more easily distinguish the active configuration from the potential domain of all legitimate configurations.

## 1.4 Properties

### Architectural Properties
The set of architectural properties of a software architecture includes all properties that derive from the selection and arrangement of components, connectors, and data within the system. 

### Architectural Properties
Examples include both the functional properties achieved by the system and non-functional properties, such as relative ease of evolution, reusability of components, efficiency, and dynamic extensibility, often referred to as quality attributes

### Constraints
Constraints are often motivated by the application of a software engineering principle to an aspect of the architectural elements.  The goal of architectural design is to create an architecture with a set of architectural properties that form a superset of the system requirements

## 1.5 Styles

### Architectural Style
An architectural style is a coordinated set of architectural constraints that restricts the roles/features of architectural elements and the allowed relationships among those elements within any architecture that conforms to that style

### Architectural Style
Specifically, an architectural style determines the vocabulary of components and connectors that can be used in instances of that style, together with a set of constraints on how they can be combined

Instead, he describes styles as the critics’ view of past architecture, where the available choice of materials, the community culture, or the ego of the local ruler were responsible for the architectural style, not the designer.

## 1.6 Patterns and Pattern Languages

### Patterns and Pattern Languages
A design pattern is defined as an important and recurring system construct. A pattern language is a system of patterns organized in a structure that guides the patterns’ application

### Pattern
A primary benefit of patterns is that they can describe relatively complex protocols of interactions between objects as a single abstraction, thus (así) including both constraints on behavior and specifics of the implementation.  In other words, a pattern defines a process for solving a problem by following a path of design and implementation choices

### Pattern
As an element in the world, each pattern is a relationship between a certain context, a certain system of forces which occurs repeatedly in that context, and a certain spatial configuration which allows these forces to resolve themselves.

### Pattern
As an element of language, a pattern is an instruction, which shows how this spatial configuration can be used, over and over again, to resolve the given system of forces, wherever the context makes it relevant.

### Style
By applying a style, an architect is differentiating the software design space in the hope that the result will better match the forces inherent in the application

## 1.7 Views

### Viewpoint
An architectural viewpoint is often application-specific and varies widely based on the application domain. ... we have seen architectural viewpoints that address a variety of issues, including: temporal issues, state and control approaches, data representation, transaction life cycle, security safeguards, and peak demand and graceful degradation

### Process View
A process view emphasizes the data flow through the components and some aspects of the connections among the components with respect to the data.

### Data View
A data view emphasizes the processing flow, with less emphasis on the connectors.

### Connection View
A connection view emphasizes the relationship between components and the state of communication.

## 1.8 Related Work

### JSD
Jackson System Development. It intentionally structures the analysis of a problem so that it leads to a style of architecture that combines
pipe-and-filter (data flow) and process control constraints.

### Taxonomía
Taxonomía tiene su origen en un vocablo griego que significa “ordenación”. Se trata de la ciencia de la clasificación que se aplica en la biología para la ordenación sistemática y jerarquizada de los grupos de animales y de vegetales.

### Taxonomía
Es importante establecer además que la taxonomía está muy en relación con lo que se conoce por el nombre de sistemática. Esta puede definirse como la ciencia que se encarga de llevar a cabo el estudio de las relaciones de parentesco, también llamadas afinidades, que se producen entre las distintas especies.

### CHAM
Inverardi and Wolf use the Chemical Abstract Machine (CHAM) formalism to model software architecture elements as chemicals whose reactions are controlled by explicitly stated rules. It specifies the behavior of components according to how they transform available data elements and uses composition rules to propagate the individual transformations into an overall system result.


#### Source
[Architectural Styles and the Design of Network-based Software Architectures][rest]

[rest]: http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm